// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// P_GDINA
Rcpp::NumericVector P_GDINA(Rcpp::NumericVector& Qi, Rcpp::NumericVector& P_est, Rcpp::NumericMatrix& pattern, Rcpp::NumericVector& P_alpha);
RcppExport SEXP _Qval_P_GDINA(SEXP QiSEXP, SEXP P_estSEXP, SEXP patternSEXP, SEXP P_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type Qi(QiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type P_est(P_estSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type P_alpha(P_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(P_GDINA(Qi, P_est, pattern, P_alpha));
    return rcpp_result_gen;
END_RCPP
}
// beta_Ni_ri
List beta_Ni_ri(const NumericMatrix& pattern, const NumericMatrix& AMP, const NumericMatrix& Y);
RcppExport SEXP _Qval_beta_Ni_ri(SEXP patternSEXP, SEXP AMPSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type AMP(AMPSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_Ni_ri(pattern, AMP, Y));
    return rcpp_result_gen;
END_RCPP
}
// calculatePEst
NumericVector calculatePEst(const NumericVector& Yi, const NumericMatrix& P_alpha_Xi);
RcppExport SEXP _Qval_calculatePEst(SEXP YiSEXP, SEXP P_alpha_XiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type P_alpha_Xi(P_alpha_XiSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePEst(Yi, P_alpha_Xi));
    return rcpp_result_gen;
END_RCPP
}
// get_Pattern
int get_Pattern(const NumericVector& s, const NumericMatrix& alpha);
RcppExport SEXP _Qval_get_Pattern(SEXP sSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Pattern(s, alpha));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_i
double log_likelihood_i(const NumericVector& Yi, const NumericVector& P_Xj_alpha, const NumericMatrix& P_alpha_Xi);
RcppExport SEXP _Qval_log_likelihood_i(SEXP YiSEXP, SEXP P_Xj_alphaSEXP, SEXP P_alpha_XiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type Yi(YiSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type P_Xj_alpha(P_Xj_alphaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type P_alpha_Xi(P_alpha_XiSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_i(Yi, P_Xj_alpha, P_alpha_Xi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Qval_P_GDINA", (DL_FUNC) &_Qval_P_GDINA, 4},
    {"_Qval_beta_Ni_ri", (DL_FUNC) &_Qval_beta_Ni_ri, 3},
    {"_Qval_calculatePEst", (DL_FUNC) &_Qval_calculatePEst, 2},
    {"_Qval_get_Pattern", (DL_FUNC) &_Qval_get_Pattern, 2},
    {"_Qval_log_likelihood_i", (DL_FUNC) &_Qval_log_likelihood_i, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Qval(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
